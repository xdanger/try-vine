// Functional and Imperative Patterns in Vine
// This demonstrates how Vine can combine different programming styles

use std::IO;

pub fn main(&io: &IO) {
  io.println("Functional and Imperative Patterns Example")

  // 定义一些数字 (避免使用数组)
  let num1 = 1
  let num2 = 2
  let num3 = 3
  let num4 = 4
  let num5 = 5
  let num6 = 6

  // 显示原始数据
  io.println("\nOriginal numbers: {num1}, {num2}, {num3}, {num4}, {num5}, {num6}")

  // 函数式风格: 计算数字和
  let sum = num1 + num2 + num3 + num4 + num5 + num6
  io.println("Sum of all numbers: {sum}")

  // 函数式风格: 找出最大值
  let max = num1
  if num2 > max { max = num2 }
  if num3 > max { max = num3 }
  if num4 > max { max = num4 }
  if num5 > max { max = num5 }
  if num6 > max { max = num6 }
  io.println("Maximum value: {max}")

  // 命令式风格: 过滤偶数
  io.print("Even numbers: ")
  if num1 % 2 == 0 { io.print("{num1} ") }
  if num2 % 2 == 0 { io.print("{num2} ") }
  if num3 % 2 == 0 { io.print("{num3} ") }
  if num4 % 2 == 0 { io.print("{num4} ") }
  if num5 % 2 == 0 { io.print("{num5} ") }
  if num6 % 2 == 0 { io.print("{num6} ") }
  io.println("")

  // 混合风格: 对偶数进行变换
  io.print("Transformed even numbers: ")
  if num1 % 2 == 0 {
    if num1 > 3 { io.print("{num1 * 2} ") }
    else { io.print("{num1 + 10} ") }
  }
  if num2 % 2 == 0 {
    if num2 > 3 { io.print("{num2 * 2} ") }
    else { io.print("{num2 + 10} ") }
  }
  if num3 % 2 == 0 {
    if num3 > 3 { io.print("{num3 * 2} ") }
    else { io.print("{num3 + 10} ") }
  }
  if num4 % 2 == 0 {
    if num4 > 3 { io.print("{num4 * 2} ") }
    else { io.print("{num4 + 10} ") }
  }
  if num5 % 2 == 0 {
    if num5 > 3 { io.print("{num5 * 2} ") }
    else { io.print("{num5 + 10} ") }
  }
  if num6 % 2 == 0 {
    if num6 > 3 { io.print("{num6 * 2} ") }
    else { io.print("{num6 + 10} ") }
  }
  io.println("")

  io.println("\nThis example demonstrates how Vine can combine")
  io.println("functional concepts (mapping, filtering) with")
  io.println("imperative programming (loops and mutable state).")
}